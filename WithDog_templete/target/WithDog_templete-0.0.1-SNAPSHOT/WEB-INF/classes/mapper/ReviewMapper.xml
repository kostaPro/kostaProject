<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store.mapper.ReviewMapper">
<<<<<<< HEAD

	<resultMap type="Review" id="ReviewMap">
		<id property="reviewId" column="reviewId"/>
		<collection property="reviewImageList" column="reviewId"
			ofType="String" select="store.mapper.ReviewMapper.retrieveImageListByReviewId"
			javaType="ArrayList" jdbcType="NUMERIC" />

		<collection property="commentList" column="reviewId"
			ofType="String" select="store.mapper.CommentMapper.retrieveCommentsByReviewId"
			javaType="ArrayList" jdbcType="NUMERIC" />
	</resultMap>

	<select id="retrieveReviewsBySpotId" parameterType="integer"
		resultType="Review">
		SELECT reviewId, title, content, registDate, writerId,
		spotId FROM review_tb
		WHERE spotId = #{spotId}
	</select>

	<select id="retrieveReviewByReviewId" parameterType="integer"
		resultType="Review" resultMap="ReviewMap">
		SELECT reviewId, title, content, registDate, writerId,
		spotId FROM review_tb
		WHERE reviewId = #{reviewId}
	</select>

	<select id="retrieveReviewsByWriterId" parameterType="String"
		resultType="Review">
		SELECT reviewId, title, content, registDate, writerId,
		spotId FROM review_tb
		WHERE writerId = #{writerId}
	</select>

	<select id="retrieveImageListByReviewId" parameterType="integer"
		resultType="String">
		SELECT imageUrl FROM reviewImage_tb
		WHERE reviewId =
		#{reviewId}
	</select>

	<insert id="createReview" parameterType="Review">
		<selectKey keyProperty="reviewId" resultType="integer"
			order="BEFORE">
			SELECT review_seq.nextval FROM dual
		</selectKey>
		INSERT INTO review_tb (reviewId, title, content, registDate, writerId,
		spotId)
		VALUES (#{reviewId}, #{title}, #{content}, SYSDATE,
		#{writerId}, #{spotId})
	</insert>

	<insert id="createReviewImage" parameterType="map">
		INSERT INTO
		reviewImage_tb (reviewImageId, imageUrl, reviewId)
		VALUES
		(reviewImage_seq.nextval, #{imageUrl}, #{reviewId})
	</insert>

	<update id="updateReview" parameterType="Review">
		UPDATE review_tb SET
		content = #{content} WHERE reviewId = #{reviewId}
	</update>

	<delete id="deleteReview" parameterType="integer">
		DELETE FROM review_tb
		WHERE reviewId = #{reviewId}
	</delete>

=======
	
	<select id="retrieveReviewsBySpotId" parameterType="integer" resultType="Review">
		SELECT reviewId, title, content, registDate, writerId, spotId FROM review_tb
		WHERE spotId = #{spotId}
	</select>
	
	<select id="retrieveReviewByReviewId" parameterType="integer" resultType="Review">
		SELECT reviewId, title, content, registDate, writerId, spotId FROM review_tb
		WHERE reviewId = #{reviewId}
	</select>
	
	<select id="retrieveReviewsByWriterId" parameterType="String" resultType="Review">
		SELECT reviewId, title, content, registDate, writerId, spotId FROM review_tb
		WHERE writerId = #{writerId}
	</select>
	
	<select id="retrieveImageListByReviewId" parameterType="integer" resultType="String">
		SELECT imageUrl FROM reviewImage_tb
		WHERE reviewId = #{reviewId}
	</select>

	<insert id="createReview" parameterType="Review">
		<selectKey keyProperty="reviewId" resultType="integer"
			order="BEFORE">
			SELECT review_seq.nextval FROM dual
		</selectKey>
		INSERT INTO review_tb (reviewId, title, content, registDate, writerId, spotId)
		VALUES (#{reviewId}, #{title}, #{content}, SYSDATE, #{writerId}, #{spotId})
	</insert>
	
	<insert id="createReviewImage" parameterType="map">
		INSERT INTO reviewImage_tb (reviewImageId, imageUrl, reviewId)
		VALUES (reviewImage_seq.nextval, #{imageUrl}, #{reviewId})
	</insert>

	<update id="updateReview" parameterType="Review">
		UPDATE review_tb SET content = #{content} WHERE reviewId = #{reviewId}
	</update>

	<delete id="deleteReview" parameterType="integer">
		DELETE FROM review_tb WHERE reviewId = #{reviewId}
	</delete>
	
>>>>>>> branch 'backUp' of https://github.com/kostaPro/kostaProject.git
</mapper>